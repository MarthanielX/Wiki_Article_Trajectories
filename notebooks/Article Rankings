{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Article Rankings","provenance":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"M2Rj_cJ8dtPq","colab_type":"code","colab":{}},"source":["import requests\n","import time"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VkGswtpuxrp4","colab_type":"code","colab":{}},"source":["NUM_ARTICLES = 1000\n","S = requests.Session()\n","URL = \"https://en.wikipedia.org/w/api.php\"\n","\n","featured_article_list = []\n","ga_class_list = [] \n","a_class_list = []\n","b_class_list = []\n","c_class_list = []"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"M1jBaiTNx0e_","colab_type":"text"},"source":["# Helper Functions "]},{"cell_type":"code","metadata":{"id":"ZoBmHWsUxxTd","colab_type":"code","colab":{}},"source":["def isFull(list_of_list_of_article_ranking):\n","    full_counter = 0\n","    for article_list in list_of_list_of_article_ranking:\n","        if len(article_list) >= NUM_ARTICLES:\n","            full_counter += 1\n","    if full_counter == 5:\n","        return True\n","    return False\n","\n","def sort_article_by_assessment(pages):\n","    for page in pages:\n","        if page[1] == 'FA' and len(featured_article_list) < NUM_ARTICLES:\n","            featured_article_list.append(page[0])\n","        elif page[1] == 'A' and len(a_class_list) < NUM_ARTICLES:\n","            a_class_list.append(page[0])\n","        elif page[1] == 'GA' and len(ga_class_list) < NUM_ARTICLES:\n","            ga_class_list.append(page[0])\n","        elif page[1] == 'B' and len(b_class_list) < NUM_ARTICLES:\n","            b_class_list.append(page[0])\n","        elif page[1] == 'C' and len(c_class_list) < NUM_ARTICLES:\n","            c_class_list.append(page[0])\n","\n","def assessments_from_generator(DATA):\n","    generated_pages = []\n","    PAGES = DATA['query']['pages']\n","    for page in PAGES:\n","        if 'pageassessments' in PAGES[page]:\n","            category = list(PAGES[page]['pageassessments'].keys())[0] \n","            ranking = PAGES[page]['pageassessments'][category]['class']\n","            generated_pages.append((PAGES[page]['title'], ranking))\n","    sort_article_by_assessment(generated_pages)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XvYVCBktyjjx","colab_type":"text"},"source":["# Output Corpus to Text File"]},{"cell_type":"code","metadata":{"id":"fCLG4w7zx9Wp","colab_type":"code","colab":{}},"source":["while not (isFull([featured_article_list, a_class_list, ga_class_list, \n","                            b_class_list, c_class_list])):\n","    \n","    PARAMS_RAND = {\n","        \"action\" : \"query\",\n","        \"generator\" : \"random\",\n","        \"grnnamespace\" : 0,\n","        \"prop\" : \"pageassessments\",\n","        \"grnlimit\" : 10,\n","        \"format\" : \"json\"\n","    }\n","    R = S.get(url = URL, params=PARAMS_RAND)\n","    DATA = R.json()\n","    assessments_from_generator(DATA)\n","\n","with open('article_corpus.txt', 'w') as outfile:\n","    outfile.write(\"Featured Articles: \\n\")\n","    for fa in featured_article_list:\n","        outfile.write('%s\\n' % fa)\n","    outfile.write(\"\\n\")\n","    outfile.write(\"A-Class Article: \\n\")\n","    for a in a_class_list:\n","        outfile.write('%s\\n' % a)\n","    outfile.write(\"\\n\")\n","    outfile.write(\"Good Articles: \\n\")\n","    for ga in ga_class_list:\n","        outfile.write('%s\\n' % ga)\n","    outfile.write(\"\\n\")\n","    outfile.write(\"B-Class Articles: \\n\")\n","    for b in b_class_list:\n","        outfile.write('%s\\n' % b)\n","    outfile.write(\"\\n\")\n","    outfile.write(\"C-Class Articles: \\n\")\n","    for c in c_class_list:\n","        outfile.write('%s\\n' % c)\n","outfile.close()"],"execution_count":0,"outputs":[]}]}