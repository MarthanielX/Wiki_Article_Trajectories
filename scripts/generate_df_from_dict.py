# -*- coding: utf-8 -*-
"""Generate DF from Dictionary

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cZWQ6Aia2rB4NWmGLG8gl32B4VW1bvMd
"""

import networkx as nx
import requests
import json
import matplotlib.pyplot as plt
import statistics
import pandas as pd
import pickle
import math

"""# Data Frame Constrution"""

diameter = nx.algorithms.distance_measures.diameter

def average_closeness(g):
  return statistics.mean(nx.algorithms.centrality.closeness_centrality(g).values())

def average_clustering(g):
  return statistics.mean(nx.algorithms.cluster.clustering(g).values())

def average_betweenness(g):
  return statistics.mean(nx.networkx.algorithms.centrality.betweenness_centrality(g).values())

def create_article_row(index):
  title = titles[index]
  print(index, title)
  revisions = revision_dict[title]
  graph = graph_dict[title]
  return (
    title,
    class_dict[title],
    diameter(graph),
    average_closeness(graph),
    average_clustering(graph),
    average_betweenness(graph),
    len(revisions), #num edits
    len(graph), #num editors
    revisions[0]['size'] #article length in bytes
  )

def construct_dataframe(article_titles):
  rows = [create_article_row(i) for i in range(len(article_titles))]
  return pd.DataFrame(rows, columns = ['title', 'class', 'diameter', 'closeness',
                                       'clustering', 'betweenness',
                                       'edit count', 'editor count', 'article size']).set_index('title')

with open('../data/graph_dictionary_all.pkl', 'rb') as f:
  graph_dict = pickle.load(f)

with open('../data/revision_dictionary_all.pkl', 'rb') as f:
  revision_dict = pickle.load(f)

with open('../data/class_dictionary.pkl', 'rb') as f:
  class_dict = pickle.load(f)

with open('../data/article_titles_all.pkl', 'rb') as f:
  class_lists = pickle.load(f)

titles = [item for sublist in class_lists for item in sublist]

df = construct_dataframe(titles)

with open('../data/df_directed_stats_original.pkl', 'wb') as f:
   pickle.dump(df, f)
